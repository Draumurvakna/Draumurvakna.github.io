/**
 * ÊùÇÂøóÈ£éÊ†ºÊëÑÂΩ±È°µÈù¢ - ÁÆÄÂåñJavaScript
 */

class PhotographyGallery {
  constructor() {
    this.config = window.PHOTOGRAPHY_CONFIG || {};
    this.photos = this.config.photos || [];
    this.categories = this.config.categories || [];
    this.currentFilter = 'all';
    this.scrollPosition = 0;
    
    this.init();
  }

  init() {
    this.setupEventListeners();
    this.renderPhotos();
  }

  setupEventListeners() {
    // ÂàÜÁ±ªÁ≠õÈÄâ
    document.querySelectorAll('.nav-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        this.setFilter(e.target.dataset.category);
      });
    });

    // ÁÖßÁâáÁÇπÂáª‰∫ã‰ª∂
    document.addEventListener('click', (e) => {
      if (e.target.closest('.photo-card')) {
        const card = e.target.closest('.photo-card');
        const photoId = card.dataset.id;
        const photo = this.photos.find(p => p.id === photoId);
        if (photo) {
          this.openViewer(photo);
        }
      }
    });

    // ÈîÆÁõò‰∫ã‰ª∂
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        this.closeViewer();
      }
    });
  }

  renderPhotos() {
    const container = document.getElementById('photoGallery');
    if (!container) return;

    const filteredPhotos = this.getFilteredPhotos();
    
    if (filteredPhotos.length === 0) {
      container.innerHTML = '<div class="empty-state">ÊöÇÊó†‰ΩúÂìÅ</div>';
      return;
    }

    container.innerHTML = '';

    filteredPhotos.forEach(photo => {
      const photoCard = this.createPhotoCard(photo);
      container.appendChild(photoCard);
    });
  }

  createPhotoCard(photo) {
    const card = document.createElement('div');
    card.className = 'photo-card';
    card.dataset.category = photo.category;
    card.dataset.id = photo.id;

    card.innerHTML = `
      <div class="photo-container">
        <img src="${photo.image}" alt="${photo.title}">
      </div>
      <div class="photo-info">
        <span class="photo-category">${this.getCategoryName(photo.category)}</span>
        <h3 class="photo-title">${photo.title}</h3>
        <p class="photo-description">${photo.description}</p>
        <div class="photo-meta">
          <span class="photo-date">üìÖ ${this.formatDate(photo.date)}</span>
          <span class="photo-location">üìç ${photo.location}</span>
        </div>
      </div>
    `;

    return card;
  }

  getFilteredPhotos() {
    if (this.currentFilter === 'all') {
      return this.photos;
    }
    return this.photos.filter(photo => photo.category === this.currentFilter);
  }

  setFilter(category) {
    this.currentFilter = category;
    
    // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
    document.querySelectorAll('.nav-btn').forEach(btn => {
      btn.classList.toggle('active', btn.dataset.category === category);
    });

    this.renderPhotos();
  }

  openViewer(photo) {
    let viewer = document.getElementById('photoViewer');
    
    // Â¶ÇÊûúÊü•ÁúãÂô®‰∏çÂ≠òÂú®ÔºåÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑ
    if (!viewer) {
      viewer = this.createViewer();
    }
    
    // Á°Æ‰øùÊü•ÁúãÂô®Áõ¥Êé•Ê∑ªÂä†Âà∞body‰∏ãÔºåËÑ±Á¶ªÈ°µÈù¢Â∏ÉÂ±Ä
    if (viewer.parentNode !== document.body) {
      document.body.appendChild(viewer);
    }

    const image = document.getElementById('viewerImage');
    const title = document.getElementById('viewerTitle');
    const description = document.getElementById('viewerDescription');
    const date = document.getElementById('viewerDate');
    const location = document.getElementById('viewerLocation');

    if (image) {
      // ‰øùÂ≠òÂΩìÂâçÊªöÂä®‰ΩçÁΩÆ
      this.scrollPosition = window.pageYOffset;
      
      image.src = photo.image;
      image.alt = photo.title;
      title.textContent = photo.title;
      description.textContent = photo.description;
      date.textContent = this.formatDate(photo.date);
      location.textContent = photo.location;

      // ‰ΩøÁî®CSSÁ±ªÊòæÁ§∫Êü•ÁúãÂô®
      viewer.classList.add('show');
      
      // Á°Æ‰øùÂÖ≥Èó≠ÊåâÈíÆ‰∫ã‰ª∂ÁªëÂÆöÊàêÂäüÔºàÈ¢ùÂ§ñ‰øùÈöúÔºâ
      setTimeout(() => {
        const closeBtn = document.getElementById('viewerClose');
        if (closeBtn && !closeBtn.hasAttribute('data-event-bound')) {
          closeBtn.addEventListener('click', () => {
            this.closeViewer();
          });
          closeBtn.setAttribute('data-event-bound', 'true');
        }
      }, 0);
      
      document.body.style.overflow = 'hidden';
      document.body.style.position = 'fixed';
      document.body.style.top = `-${this.scrollPosition}px`;
      document.body.style.width = '100%';
    }
  }

  createViewer() {
    const viewer = document.createElement('div');
    viewer.id = 'photoViewer';
    viewer.className = 'photo-viewer';
    
    viewer.innerHTML = `
      <div class="viewer-overlay" id="viewerOverlay"></div>
      <div class="viewer-content">
        <button class="viewer-close" id="viewerClose">√ó</button>
        <img id="viewerImage" src="" alt="">
        <div class="viewer-info">
          <h3 id="viewerTitle"></h3>
          <p id="viewerDescription"></p>
          <div class="viewer-meta">
            <span id="viewerDate"></span>
            <span id="viewerLocation"></span>
          </div>
        </div>
      </div>
    `;
    
    // Ê∑ªÂä†‰∫ã‰ª∂ÁõëÂê¨Âô®
    const closeBtn = viewer.querySelector('#viewerClose');
    closeBtn.addEventListener('click', () => {
      this.closeViewer();
    });
    closeBtn.setAttribute('data-event-bound', 'true');
    
    viewer.querySelector('#viewerOverlay').addEventListener('click', () => {
      this.closeViewer();
    });
    
    return viewer;
  }

  closeViewer() {
    const viewer = document.getElementById('photoViewer');
    if (viewer) {
      // ‰ΩøÁî®CSSÁ±ªÈöêËóèÊü•ÁúãÂô®
      viewer.classList.remove('show');
      
      // ÊÅ¢Â§çÊªöÂä®Ê†∑ÂºèÂíå‰ΩçÁΩÆ
      document.body.style.overflow = '';
      document.body.style.position = '';
      document.body.style.top = '';
      document.body.style.width = '';
      
      // ÊÅ¢Â§ç‰πãÂâçÁöÑÊªöÂä®‰ΩçÁΩÆ
      if (typeof this.scrollPosition === 'number') {
        window.scrollTo(0, this.scrollPosition);
      }
    }
  }

  getCategoryName(categoryId) {
    const category = this.categories.find(c => c.id === categoryId);
    return category ? category.name : 'Êú™ÂàÜÁ±ª';
  }

  formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('zh-CN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    });
  }
}

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', () => {
  new PhotographyGallery();
}); 